//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Licenses.json`.
    static let licensesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Licenses", pathExtension: "json")
    /// Resource file `liste_fragen.json`.
    static let liste_fragenJson = Rswift.FileResource(bundle: R.hostingBundle, name: "liste_fragen", pathExtension: "json")
    
    /// `bundle.url(forResource: "Licenses", withExtension: "json")`
    static func licensesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensesJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "liste_fragen", withExtension: "json")`
    static func liste_fragenJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.liste_fragenJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `closeButton`.
    static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeButton")
    /// Image `consumeSmall`.
    static let consumeSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "consumeSmall")
    /// Image `consume`.
    static let consume = Rswift.ImageResource(bundle: R.hostingBundle, name: "consume")
    /// Image `flashButton`.
    static let flashButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "flashButton")
    /// Image `listButton`.
    static let listButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "listButton")
    /// Image `placeholer`.
    static let placeholer = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholer")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `trashSmall`.
    static let trashSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "trashSmall")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "closeButton", bundle: ..., traitCollection: ...)`
    static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "consume", bundle: ..., traitCollection: ...)`
    static func consume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.consume, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "consumeSmall", bundle: ..., traitCollection: ...)`
    static func consumeSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.consumeSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flashButton", bundle: ..., traitCollection: ...)`
    static func flashButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "listButton", bundle: ..., traitCollection: ...)`
    static func listButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholer", bundle: ..., traitCollection: ...)`
    static func placeholer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trashSmall", bundle: ..., traitCollection: ...)`
    static func trashSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trashSmall, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `Scan_Controller`, and contains static references to 1 segues.
    struct scan_Controller {
      /// Segue identifier `showCameraView`.
      static let showCameraView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, Scan_Controller, Scan_CameraController> = Rswift.StoryboardSegueIdentifier(identifier: "showCameraView")
      
      /// Optionally returns a typed version of segue `showCameraView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCameraView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, Scan_Controller, Scan_CameraController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.scan_Controller.showCameraView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Question`.
    static let question = _R.storyboard.question()
    /// Storyboard `Scan`.
    static let scan = _R.storyboard.scan()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Question", bundle: ...)`
    static func question(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.question)
    }
    
    /// `UIStoryboard(name: "Scan", bundle: ...)`
    static func scan(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.scan)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try login.validate()
      try scan.validate()
      try question.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginView = StoryboardViewControllerResource<LoginController>(identifier: "LoginView")
      let name = "Login"
      
      func loginView(_: Void = ()) -> LoginController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginView)
      }
      
      static func validate() throws {
        if _R.storyboard.login().loginView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginView' could not be loaded from storyboard 'Login' as 'LoginController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct question: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Question"
      let questionView = StoryboardViewControllerResource<QuestionController>(identifier: "QuestionView")
      
      func questionView(_: Void = ()) -> QuestionController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: questionView)
      }
      
      static func validate() throws {
        if _R.storyboard.question().questionView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'questionView' could not be loaded from storyboard 'Question' as 'QuestionController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct scan: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cameraView = StoryboardViewControllerResource<Scan_CameraController>(identifier: "CameraView")
      let name = "Scan"
      let readFoto = StoryboardViewControllerResource<ReadFotoController>(identifier: "ReadFoto")
      let scanNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ScanNavigation")
      let scanView = StoryboardViewControllerResource<Scan_Controller>(identifier: "ScanView")
      
      func cameraView(_: Void = ()) -> Scan_CameraController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cameraView)
      }
      
      func readFoto(_: Void = ()) -> ReadFotoController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: readFoto)
      }
      
      func scanNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanNavigation)
      }
      
      func scanView(_: Void = ()) -> Scan_Controller? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanView)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "flashButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flashButton' is used in storyboard 'Scan', but couldn't be loaded.") }
        if _R.storyboard.scan().scanNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanNavigation' could not be loaded from storyboard 'Scan' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.scan().readFoto() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'readFoto' could not be loaded from storyboard 'Scan' as 'ReadFotoController'.") }
        if _R.storyboard.scan().scanView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanView' could not be loaded from storyboard 'Scan' as 'Scan_Controller'.") }
        if _R.storyboard.scan().cameraView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cameraView' could not be loaded from storyboard 'Scan' as 'Scan_CameraController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
